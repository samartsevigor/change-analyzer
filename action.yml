name: 'Savant Smart Contract Analyzer'
description: 'Analyzes changes in Solidity contracts between commits'
branding:
  icon: 'search'
  color: 'blue'
inputs:
  base_commit:
    description: 'Base commit SHA for comparison'
    required: true
  head_commit:
    description: 'Head commit SHA for comparison'
    required: true
  github_token:
    description: 'GitHub token for repository access'
    required: false
    default: ${{ github.token }}
  api_token:
    description: 'API token for the audit service. Get it from https://savant.chat (Profile -> Settings -> API Keys)'
    required: true
  api_url:
    description: 'URL for the audit service API endpoint'
    required: false
    default: 'https://savant.chat/api/v1/ci-cd/requests'
  dry_run:
    description: 'Whether to perform a dry run (do not create real audit)'
    required: false
    default: 'false'
  tier:
    description: 'Tier'
    required: false
    default: 'advanced'
  project_id:
    description: 'Documentation project ID'
    required: false

runs:
  using: 'composite'
  steps:
    - name: Send diff request to backend
      shell: bash
      run: |
        echo "Sending request to backend at ${{ inputs.api_url }}"
        echo "Inputs:"
        echo "  repo: ${{ github.repository }}"
        echo "  base_commit: ${{ inputs.base_commit }}"
        echo "  head_commit: ${{ inputs.head_commit }}"
        echo "  dry_run: ${{ inputs.dry_run }}"
        echo "  tier: ${{ inputs.tier }}"
        echo "  project_id: ${{ inputs.project_id }}"
        PAYLOAD="{\"repo\":\"${{ github.repository }}\",\"base_commit\":\"${{ inputs.base_commit }}\",\"head_commit\":\"${{ inputs.head_commit }}\",\"github_token\":\"${{ inputs.github_token }}\",\"api_token\":\"${{ inputs.api_token }}\",\"dry_run\":${{ inputs.dry_run }},\"tier\":\"${{ inputs.tier }}\",\"project_id\":\"${{ inputs.project_id }}\"}"
        echo "Request payload: $PAYLOAD"
        RESPONSE=$(curl -sS -X POST "${{ inputs.api_url }}" \
          -H "Authorization: Bearer ${{ inputs.api_token }}" \
          -H "Content-Type: application/json" \
          -d "$PAYLOAD") || true
        echo "Response body:"
        echo "$RESPONSE"
        # Try parsing JSON response
        if echo "$RESPONSE" | jq . >/dev/null 2>&1; then
          AUDIT_URL=$(echo "$RESPONSE" | jq -r .audit_url)
        else
          echo "Non-JSON response (likely HTML). See above."
          exit 1
        fi
        # Ensure audit_url is present
        if [ -z "$AUDIT_URL" ] || [ "$AUDIT_URL" = "null" ]; then
          echo "Error: audit_url not found in JSON response"
          exit 1
        fi
        # Generate redirect HTML
        echo "<html><head><meta http-equiv=\"refresh\" content=\"0; URL=$AUDIT_URL\" /></head></html>" > audit.html
    - name: Upload audit redirect HTML
      uses: actions/upload-artifact@v4
      with:
        name: audit-redirect
        path: audit.html 