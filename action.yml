name: 'Savant Smart Contract Analyzer'
description: 'Analyzes changes in Solidity contracts between commits'
branding:
  icon: 'search'
  color: 'blue'
inputs:
  base_commit:
    description: 'Base commit SHA for comparison'
    required: true
  head_commit:
    description: 'Head commit SHA for comparison'
    required: true
  github_token:
    description: 'GitHub token for repository access'
    required: false
    default: ${{ github.token }}
  api_token:
    description: 'API token for the audit service. Get it from https://savant.chat (Profile -> Settings -> API Keys)'
    required: true
  api_url:
    description: 'URL for the audit service API endpoint'
    required: false
    default: 'https://savant.chat/api/v1/ci-cd/requests'
  dry_run:
    description: 'Whether to perform a dry run (do not create real audit)'
    required: false
    default: 'false'
  tier:
    description: 'Tier'
    required: false
    default: 'advanced'
  project_id:
    description: 'Documentation project ID'
    required: false

runs:
  using: 'composite'
  steps:
    - name: Send diff request to backend
      shell: bash
      run: |
        # Repository context
        REPO="$GITHUB_REPOSITORY"
        BASE_COMMIT="$INPUT_BASE_COMMIT"
        HEAD_COMMIT="$INPUT_HEAD_COMMIT"
        GITHUB_TOKEN="$INPUT_GITHUB_TOKEN"
        API_TOKEN="$INPUT_API_TOKEN"
        API_URL="$INPUT_API_URL"
        DRY_RUN="$INPUT_DRY_RUN"
        TIER="$INPUT_TIER"
        PROJECT_ID="$INPUT_PROJECT_ID"
        echo "Sending request to backend at $API_URL"
        PAYLOAD="{\"repo\":\"$REPO\",\"base_commit\":\"$BASE_COMMIT\",\"head_commit\":\"$HEAD_COMMIT\",\"github_token\":\"$GITHUB_TOKEN\",\"api_token\":\"$API_TOKEN\",\"dry_run\":$DRY_RUN,\"tier\":\"$TIER\",\"project_id\":\"$PROJECT_ID\"}"
        echo "Request payload: $PAYLOAD"
        RESPONSE=$(curl -sS -i -X POST "$API_URL" \
          -H "Authorization: Bearer $API_TOKEN" \
          -H "Content-Type: application/json" \
          -d "$PAYLOAD") || true
        echo "Full response (headers + body):"
        echo "$RESPONSE"
        AUDIT_URL=$(echo "$RESPONSE" | python3 -c 'import sys,json; print(json.load(sys.stdin).get("audit_url",""))')
        if [ -z "$AUDIT_URL" ]; then
          echo "Error: audit_url not found in response"
          exit 1
        fi
        echo "<html><head><meta http-equiv=\"refresh\" content=\"0; URL=$AUDIT_URL\" /></head></html>" > audit.html
    - name: Upload audit redirect HTML
      uses: actions/upload-artifact@v4
      with:
        name: audit-redirect
        path: audit.html 